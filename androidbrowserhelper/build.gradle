/*
 *    Copyright 2019 Google LLC
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

plugins {
    id 'com.android.library'
    id 'maven-publish'
}

// Before 2.6.1, the version code was unused and was kept at 1.
// This is now being used to report metrics, and should be bumped with
// every version bump.
def VERSION = "2.7.0-alpha02";
def VERSION_CODE = 4;

android {
    namespace "com.google.androidbrowserhelper"

    defaultConfig {
        minSdkVersion 23
        compileSdk 36
        targetSdkVersion 31
        versionCode VERSION_CODE
        versionName VERSION

        buildConfigField "int", "LIBRARY_VERSION", "${versionCode}"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        buildConfig true
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    // Force newest versions of kotlin and coroutines to avoid duplicate classes in kotlin-stdlib
    implementation(platform(libs.kotlin.bom))
    implementation(platform(libs.kotlin.coroutines.bom))

    api libs.androidx.browser

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation libs.androidx.annotation
    implementation libs.androidx.core
    implementation libs.androidx.appcompat
    implementation libs.guava

    testImplementation libs.junit
    testImplementation libs.mockito.core
    testImplementation libs.robolectric

    androidTestImplementation libs.androidx.runner
    androidTestImplementation libs.androidx.rules
    androidTestImplementation libs.androidx.ext.junit
    androidTestImplementation libs.mockito.core
    androidTestImplementation libs.dexmaker.mockito
    androidTestImplementation libs.junit
}

publishing {
    publications {
        Production(MavenPublication) {
            pom {
                name = 'android-browser-helper'
                url = 'https://github.com/GoogleChrome/android-browser-helper'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }

            artifact("$buildDir/outputs/aar/androidbrowserhelper-release.aar")

            groupId 'com.google.androidbrowserhelper'
            artifactId 'androidbrowserhelper'
            version VERSION

            // This ensures that the generated POM file contains the correct Android dependencies.
            // The section used the BinTray example as a base:
            // https://github.com/bintray/bintray-examples/blob/master/gradle-bintray-plugin-examples/android-gradle-3.0.0-maven-example/app/publish.gradle#L7-L31
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                // Iterate over the implementation dependencies (we don't want the test ones),
                // adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    // Ensure dependencies such as fileTree are not included in the pom.
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}
