/*
 *    Copyright 2020 Google LLC
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

def VERSION = "1.0.0-alpha10";

android {
    compileSdkVersion 31
    buildToolsVersion "30.0.3"

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 31
        versionCode 1
        versionName VERSION

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    api 'androidx.browser:browser:1.4.0'

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.billingclient:billing:5.2.1'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.robolectric:robolectric:4.4'

    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'junit:junit:4.12'
    debugImplementation project(path: ':androidbrowserhelper')
    releaseImplementation 'com.google.androidbrowserhelper:androidbrowserhelper:2.2.2'
}

/**
 * Adds gradle dependencies to the POM dependency node.
 */
def addDependencies(pomDependenciesNode, gradleDependencies) {
    gradleDependencies.each {
        // Ensure dependencies such as fileTree are not included in the pom.
        if (it.name != 'unspecified') {
            def dependencyNode = pomDependenciesNode.appendNode('dependency')
            dependencyNode.appendNode('groupId', it.group)
            dependencyNode.appendNode('artifactId', it.name)
            dependencyNode.appendNode('version', it.version)
        }
    }
}

publishing {
    publications {
        Production(MavenPublication) {
            pom {
                name = 'android-browser-helper-billing'
                url = 'https://github.com/GoogleChrome/android-browser-helper/tree/main/playbilling'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }

            artifact("$buildDir/outputs/aar/playbilling-release.aar")

            groupId 'com.google.androidbrowserhelper'
            artifactId 'billing'
            version VERSION

            // This ensures that the generated POM file contains the correct Android dependencies.
            // The section used the BinTray example as a base:
            // https://github.com/bintray/bintray-examples/blob/master/gradle-bintray-plugin-examples/android-gradle-3.0.0-maven-example/app/publish.gradle#L7-L31
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                // Import dependencies marked with 'implementation' and 'releaseImplementation'.
                // Dependencies marked with 'debugImplementation' are ignored.
                addDependencies(
                        dependenciesNode, configurations.implementation.allDependencies);
                addDependencies(
                        dependenciesNode, configurations.releaseImplementation.allDependencies);
            }
        }
    }
}
